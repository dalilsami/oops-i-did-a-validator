{"version":3,"sources":["../src/Oops.js"],"names":["Oops","rules","promisified","presets","elem","scheme","method","baseName","Promise","res","rej","_check","e","Object","keys","forEach","rule","Error","entries","field","checkRules","value","name","required","patchable","undefined","validate","ruleName","ruleValue","check"],"mappings":"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","sourcesContent":["import * as presets from \"./presets\"\n\nexport default class Oops {\n  constructor({ rules, promisified } = {}) {\n    if (!rules || typeof rules !== \"object\") {\n      rules = {}\n    }\n    this.rules = {\n      ...rules,\n      ...presets\n    }\n    this.promisified = promisified\n  }\n\n  /**\n   * check is the base validating function\n   *\n   * @param {Object} elem - the object to check\n   * @param {Object} scheme - the scheme to validate\n   * @param {[String]} method - POST or PATCH\n   * @param {[String]} name - the name of your object\n   * @returns {Promise?} - if promisified is true when creating the class,\n   * it returns a Promise, otherwise, it returns nothing\n   * and you have to catch the thrown error\n   */\n  check(elem, scheme, method, baseName) {\n    return this.promisified\n      ? new Promise((res, rej) => {\n        try {\n          res(this._check(elem, scheme, method, baseName))\n        } catch (e) {\n          rej(e)\n        }\n      })\n      : this._check(elem, scheme, method, baseName)\n  }\n\n  checkRules(rules) {\n    Object\n      .keys(rules)\n      .forEach(rule => {\n        if (!(rule in this.rules)) {\n          throw new Error(`${rule} is not an existing rule`)\n        }\n      })\n  }\n\n  _check(elem, scheme = {}, method = \"POST\", baseName = \"\") {\n    if (typeof elem !== \"object\") {\n      throw new Error(\"Parameter is not an object !\")\n    }\n    Object\n      .entries(scheme)\n      .forEach(([field, rules]) => {\n        this.checkRules(rules)\n        const value = elem[field]\n        const name = baseName ? `${baseName}.${field}` : field\n\n        if (method === \"POST\") {\n          this.rules.required(value, name, rules.required)\n        } else if (method === \"PATCH\") {\n          this.rules.patchable(value, name, rules.patchable)\n        }\n        if (value === undefined) {\n          return\n        }\n        this.validate(elem[field], name, rules)\n      })\n  }\n\n  _validate(value, name = \"\", rules = {}) {\n    Object\n      .entries(rules)\n      .forEach(([ruleName, ruleValue]) => this.rules[ruleName](\n        value,\n        name,\n        ruleValue,\n        { check: this._check, validate: this.validate }\n      ))\n  }\n}\n"],"file":"Oops.js"}