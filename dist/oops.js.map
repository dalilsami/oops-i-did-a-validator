{"version":3,"sources":["../src/oops.js"],"names":["Oops","rules","additionnalRules","presets","Object","keys","forEach","rule","Error","elem","scheme","name","entries","field","checkRules","validate","value","required","undefined","ruleName","ruleValue"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,I;;;AACnB,sBAAuB;AAAA,QAATC,KAAS,QAATA,KAAS;;AAAA;;AACrB,QAAI,CAACA,KAAD,IAAU,QAAOC,gBAAP,yCAAOA,gBAAP,OAA4B,QAA1C,EAAoD;AAClDD,MAAAA,KAAK,GAAG,EAAR;AACD;;AACD,SAAKA,KAAL,qBACKA,KADL,MAEKE,OAFL;AAID;;;;+BAEUF,K,EAAO;AAAA;;AAChBG,MAAAA,MAAM,CACHC,IADH,CACQJ,KADR,EAEGK,OAFH,CAEW,UAAAC,IAAI,EAAI;AACf,YAAI,EAAEA,IAAI,IAAI,KAAI,CAACN,KAAf,CAAJ,EAA2B;AACzB,gBAAM,IAAIO,KAAJ,WAAaD,IAAb,8BAAN;AACD;AACF,OANH;AAOD;;;0BAEKE,I,EAA8B;AAAA;;AAAA,UAAxBC,MAAwB,uEAAf,EAAe;AAAA,UAAXC,IAAW,uEAAJ,EAAI;;AAClC,UAAI,QAAOF,IAAP,MAAgB,QAApB,EAA8B;AAC5B,cAAM,IAAID,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACDJ,MAAAA,MAAM,CACHQ,OADH,CACWF,MADX,EAEGJ,OAFH,CAEW,iBAAoB;AAAA;AAAA,YAAlBO,KAAkB;AAAA,YAAXZ,KAAW;;AAC3B,QAAA,MAAI,CAACa,UAAL,CAAgBb,KAAhB;;AACA,QAAA,MAAI,CAACc,QAAL,CACEN,IAAI,CAACI,KAAD,CADN,EAEEF,IAAI,aAAMA,IAAN,cAAcE,KAAd,IAAwBA,KAF9B,EAGEZ,KAHF;AAKD,OATH;AAUD;;;6BAEQe,K,EAA8B;AAAA;;AAAA,UAAvBL,IAAuB,uEAAhB,EAAgB;AAAA,UAAZV,KAAY,uEAAJ,EAAI;AACrC,WAAKA,KAAL,CAAWgB,QAAX,CAAoBD,KAApB,EAA2BL,IAA3B,EAAiCV,KAAK,CAACgB,QAAvC;;AACA,UAAID,KAAK,KAAKE,SAAd,EAAyB;AACvB;AACD;;AACDd,MAAAA,MAAM,CACHQ,OADH,CACWX,KADX,EAEGK,OAFH,CAEW;AAAA;AAAA,YAAEa,QAAF;AAAA,YAAYC,SAAZ;;AAAA,eACP,MAAI,CAACnB,KAAL,CAAWkB,QAAX,EAAqBH,KAArB,EAA4BL,IAA5B,EAAkCS,SAAlC,EAA6C,MAA7C,CADO;AAAA,OAFX;AAKD","sourcesContent":["import * as presets from \"./presets\"\n\nexport default class Oops {\n  constructor({ rules }) {\n    if (!rules || typeof additionnalRules !== \"object\") {\n      rules = {}\n    }\n    this.rules = {\n      ...rules,\n      ...presets\n    }\n  }\n\n  checkRules(rules) {\n    Object\n      .keys(rules)\n      .forEach(rule => {\n        if (!(rule in this.rules)) {\n          throw new Error(`${rule} is not an existing rule`)\n        }\n      })\n  }\n\n  check(elem, scheme = {}, name = \"\") {\n    if (typeof elem !== \"object\") {\n      throw new Error(\"Parameter is not an object !\")\n    }\n    Object\n      .entries(scheme)\n      .forEach(([field, rules]) => {\n        this.checkRules(rules)\n        this.validate(\n          elem[field],\n          name ? `${name}.${field}` : field,\n          rules\n        )\n      })\n  }\n\n  validate(value, name = \"\", rules = {}) {\n    this.rules.required(value, name, rules.required)\n    if (value === undefined) {\n      return\n    }\n    Object\n      .entries(rules)\n      .forEach(([ruleName, ruleValue]) =>\n        this.rules[ruleName](value, name, ruleValue, this)\n      )\n  }\n}\n"],"file":"oops.js"}